// <auto-generated />
using System;
using InvoiceManagmentSystem.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvoiceManagmentSystem.DataAccess.Migrations
{
    [DbContext(typeof(InvoiceManagementSystemDbContext))]
    [Migration("20230228130006_InvoiceSystemDb")]
    partial class InvoiceSystemDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvoiceManagmentSystem.Core.Entity.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Core.Entity.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "berk@hotmail.com",
                            FirstName = "Berk",
                            LastName = "Gultekin",
                            PasswordHash = new byte[] { 245, 66, 121, 118, 32, 162, 52, 176, 57, 197, 40, 75, 225, 96, 145, 189, 64, 104, 122, 195, 14, 41, 251, 207, 42, 65, 62, 66, 210, 188, 55, 218, 126, 111, 252, 3, 2, 210, 174, 140, 36, 124, 220, 0, 220, 188, 252, 13, 114, 101, 34, 158, 91, 162, 239, 109, 156, 69, 34, 129, 156, 133, 187, 236 },
                            PasswordSalt = new byte[] { 144, 34, 171, 132, 239, 140, 174, 204, 61, 167, 69, 240, 40, 10, 100, 3, 28, 113, 225, 119, 60, 44, 169, 254, 193, 138, 39, 128, 125, 112, 39, 6, 68, 129, 102, 251, 112, 64, 179, 104, 8, 21, 118, 213, 76, 80, 110, 12, 17, 232, 226, 169, 114, 197, 211, 240, 125, 217, 67, 94, 2, 202, 119, 92, 172, 119, 134, 236, 32, 234, 167, 79, 97, 1, 216, 31, 148, 209, 21, 195, 160, 105, 131, 145, 149, 225, 35, 136, 49, 143, 53, 183, 162, 170, 232, 100, 184, 85, 169, 149, 34, 123, 22, 136, 36, 115, 249, 126, 109, 197, 139, 24, 65, 33, 14, 9, 101, 177, 228, 1, 191, 17, 199, 187, 214, 206, 139, 25 },
                            PhoneNumber = "5320000000",
                            Plate = "49 AC 49",
                            RoleId = 1,
                            TC = "11111111111"
                        },
                        new
                        {
                            Id = 2,
                            Email = "can@hotmail.com",
                            FirstName = "Can",
                            LastName = "demir",
                            PasswordHash = new byte[] { 245, 66, 121, 118, 32, 162, 52, 176, 57, 197, 40, 75, 225, 96, 145, 189, 64, 104, 122, 195, 14, 41, 251, 207, 42, 65, 62, 66, 210, 188, 55, 218, 126, 111, 252, 3, 2, 210, 174, 140, 36, 124, 220, 0, 220, 188, 252, 13, 114, 101, 34, 158, 91, 162, 239, 109, 156, 69, 34, 129, 156, 133, 187, 236 },
                            PasswordSalt = new byte[] { 144, 34, 171, 132, 239, 140, 174, 204, 61, 167, 69, 240, 40, 10, 100, 3, 28, 113, 225, 119, 60, 44, 169, 254, 193, 138, 39, 128, 125, 112, 39, 6, 68, 129, 102, 251, 112, 64, 179, 104, 8, 21, 118, 213, 76, 80, 110, 12, 17, 232, 226, 169, 114, 197, 211, 240, 125, 217, 67, 94, 2, 202, 119, 92, 172, 119, 134, 236, 32, 234, 167, 79, 97, 1, 216, 31, 148, 209, 21, 195, 160, 105, 131, 145, 149, 225, 35, 136, 49, 143, 53, 183, 162, 170, 232, 100, 184, 85, 169, 149, 34, 123, 22, 136, 36, 115, 249, 126, 109, 197, 139, 24, 65, 33, 14, 9, 101, 177, 228, 1, 191, 17, 199, 187, 214, 206, 139, 25 },
                            PhoneNumber = "5320000001",
                            Plate = "61 AC 62",
                            RoleId = 2,
                            TC = "11111111112"
                        },
                        new
                        {
                            Id = 3,
                            Email = "burak@hotmail.com",
                            FirstName = "Burak",
                            LastName = "ipekçi",
                            PasswordHash = new byte[] { 245, 66, 121, 118, 32, 162, 52, 176, 57, 197, 40, 75, 225, 96, 145, 189, 64, 104, 122, 195, 14, 41, 251, 207, 42, 65, 62, 66, 210, 188, 55, 218, 126, 111, 252, 3, 2, 210, 174, 140, 36, 124, 220, 0, 220, 188, 252, 13, 114, 101, 34, 158, 91, 162, 239, 109, 156, 69, 34, 129, 156, 133, 187, 236 },
                            PasswordSalt = new byte[] { 144, 34, 171, 132, 239, 140, 174, 204, 61, 167, 69, 240, 40, 10, 100, 3, 28, 113, 225, 119, 60, 44, 169, 254, 193, 138, 39, 128, 125, 112, 39, 6, 68, 129, 102, 251, 112, 64, 179, 104, 8, 21, 118, 213, 76, 80, 110, 12, 17, 232, 226, 169, 114, 197, 211, 240, 125, 217, 67, 94, 2, 202, 119, 92, 172, 119, 134, 236, 32, 234, 167, 79, 97, 1, 216, 31, 148, 209, 21, 195, 160, 105, 131, 145, 149, 225, 35, 136, 49, 143, 53, 183, 162, 170, 232, 100, 184, 85, 169, 149, 34, 123, 22, 136, 36, 115, 249, 126, 109, 197, 139, 24, 65, 33, 14, 9, 101, 177, 228, 1, 191, 17, 199, 187, 214, 206, 139, 25 },
                            PhoneNumber = "5320000002",
                            Plate = "61 AC 63",
                            RoleId = 2,
                            TC = "11111111113"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Core.Entity.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockID")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("boolean");

                    b.Property<int>("StyleID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StyleID");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockID = 1,
                            CustomerID = 1,
                            Floor = 18,
                            IsEmpty = true,
                            StyleID = 1
                        },
                        new
                        {
                            Id = 2,
                            BlockID = 2,
                            CustomerID = 2,
                            Floor = 19,
                            IsEmpty = true,
                            StyleID = 2
                        },
                        new
                        {
                            Id = 3,
                            BlockID = 3,
                            CustomerID = 3,
                            Floor = 20,
                            IsEmpty = true,
                            StyleID = 3
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A Block"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B Block"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C Block"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("CardNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CardPassword")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 3000,
                            CardNumber = 11223344,
                            CardPassword = 1234,
                            CustomerID = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 4000,
                            CardNumber = 11112222,
                            CardPassword = 4321,
                            CustomerID = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 5000,
                            CardNumber = 33334444,
                            CardPassword = 1221,
                            CustomerID = 3
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<string>("WrotenMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1+1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2+1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "3+1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4+1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5+1"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Apartment", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Customer");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Card", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Debt", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Message", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Payment", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Card");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
