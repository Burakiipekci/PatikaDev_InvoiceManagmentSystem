// <auto-generated />
using System;
using InvoiceManagmentSystem.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvoiceManagmentSystem.DataAccess.Migrations
{
    [DbContext(typeof(InvoiceManagementSystemDbContext))]
    [Migration("20230226135131_InvoiceManagmentSystem")]
    partial class InvoiceManagmentSystem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvoiceManagmentSystem.Core.Entity.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Core.Entity.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "asdfasd1@hotmail.com",
                            FirstName = "Berk",
                            LastName = "Gultekin",
                            PasswordHash = new byte[] { 171, 47, 28, 107, 187, 192, 102, 211, 200, 135, 134, 143, 26, 72, 245, 89, 164, 90, 17, 240, 140, 127, 137, 250, 245, 18, 43, 136, 46, 168, 57, 64, 99, 190, 170, 94, 137, 50, 188, 54, 251, 71, 81, 237, 185, 109, 224, 93, 24, 71, 114, 248, 69, 249, 153, 240, 31, 132, 151, 222, 3, 140, 203, 33 },
                            PasswordSalt = new byte[] { 56, 228, 224, 130, 96, 177, 151, 170, 164, 244, 192, 58, 32, 118, 6, 238, 16, 93, 2, 93, 105, 132, 20, 128, 178, 137, 16, 169, 109, 175, 26, 36, 245, 209, 155, 163, 234, 46, 185, 183, 114, 214, 12, 141, 250, 215, 139, 123, 84, 225, 112, 233, 210, 174, 117, 190, 97, 53, 79, 98, 45, 234, 5, 161, 9, 240, 88, 118, 235, 6, 207, 208, 121, 223, 130, 253, 109, 172, 130, 215, 171, 147, 173, 30, 154, 156, 80, 71, 15, 170, 67, 22, 194, 114, 237, 98, 166, 137, 173, 20, 193, 249, 107, 48, 227, 131, 61, 169, 112, 160, 77, 41, 83, 13, 92, 187, 64, 170, 224, 205, 115, 94, 20, 158, 64, 211, 106, 192 },
                            PhoneNumber = "5320000000",
                            Plate = "49 AC 49",
                            RoleId = 1,
                            TC = "11111111111"
                        },
                        new
                        {
                            Id = 2,
                            Email = "asdfasd2@hotmail.com",
                            FirstName = "Can",
                            LastName = "demir",
                            PasswordHash = new byte[] { 171, 47, 28, 107, 187, 192, 102, 211, 200, 135, 134, 143, 26, 72, 245, 89, 164, 90, 17, 240, 140, 127, 137, 250, 245, 18, 43, 136, 46, 168, 57, 64, 99, 190, 170, 94, 137, 50, 188, 54, 251, 71, 81, 237, 185, 109, 224, 93, 24, 71, 114, 248, 69, 249, 153, 240, 31, 132, 151, 222, 3, 140, 203, 33 },
                            PasswordSalt = new byte[] { 56, 228, 224, 130, 96, 177, 151, 170, 164, 244, 192, 58, 32, 118, 6, 238, 16, 93, 2, 93, 105, 132, 20, 128, 178, 137, 16, 169, 109, 175, 26, 36, 245, 209, 155, 163, 234, 46, 185, 183, 114, 214, 12, 141, 250, 215, 139, 123, 84, 225, 112, 233, 210, 174, 117, 190, 97, 53, 79, 98, 45, 234, 5, 161, 9, 240, 88, 118, 235, 6, 207, 208, 121, 223, 130, 253, 109, 172, 130, 215, 171, 147, 173, 30, 154, 156, 80, 71, 15, 170, 67, 22, 194, 114, 237, 98, 166, 137, 173, 20, 193, 249, 107, 48, 227, 131, 61, 169, 112, 160, 77, 41, 83, 13, 92, 187, 64, 170, 224, 205, 115, 94, 20, 158, 64, 211, 106, 192 },
                            PhoneNumber = "5320000001",
                            Plate = "61 AC 62",
                            RoleId = 2,
                            TC = "11111111112"
                        },
                        new
                        {
                            Id = 3,
                            Email = "asdfasd3@hotmail.com",
                            FirstName = "Burak",
                            LastName = "ipekçi",
                            PasswordHash = new byte[] { 171, 47, 28, 107, 187, 192, 102, 211, 200, 135, 134, 143, 26, 72, 245, 89, 164, 90, 17, 240, 140, 127, 137, 250, 245, 18, 43, 136, 46, 168, 57, 64, 99, 190, 170, 94, 137, 50, 188, 54, 251, 71, 81, 237, 185, 109, 224, 93, 24, 71, 114, 248, 69, 249, 153, 240, 31, 132, 151, 222, 3, 140, 203, 33 },
                            PasswordSalt = new byte[] { 56, 228, 224, 130, 96, 177, 151, 170, 164, 244, 192, 58, 32, 118, 6, 238, 16, 93, 2, 93, 105, 132, 20, 128, 178, 137, 16, 169, 109, 175, 26, 36, 245, 209, 155, 163, 234, 46, 185, 183, 114, 214, 12, 141, 250, 215, 139, 123, 84, 225, 112, 233, 210, 174, 117, 190, 97, 53, 79, 98, 45, 234, 5, 161, 9, 240, 88, 118, 235, 6, 207, 208, 121, 223, 130, 253, 109, 172, 130, 215, 171, 147, 173, 30, 154, 156, 80, 71, 15, 170, 67, 22, 194, 114, 237, 98, 166, 137, 173, 20, 193, 249, 107, 48, 227, 131, 61, 169, 112, 160, 77, 41, 83, 13, 92, 187, 64, 170, 224, 205, 115, 94, 20, 158, 64, 211, 106, 192 },
                            PhoneNumber = "5320000002",
                            Plate = "61 AC 63",
                            RoleId = 2,
                            TC = "11111111113"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("boolean");

                    b.Property<int>("StyleID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StyleID");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockID = 1,
                            CustomerID = 1,
                            Floor = 18,
                            IsEmpty = true,
                            StyleID = 1
                        },
                        new
                        {
                            Id = 2,
                            BlockID = 2,
                            CustomerID = 2,
                            Floor = 19,
                            IsEmpty = true,
                            StyleID = 2
                        },
                        new
                        {
                            Id = 3,
                            BlockID = 3,
                            CustomerID = 3,
                            Floor = 20,
                            IsEmpty = true,
                            StyleID = 3
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A Block"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B Block"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C Block"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("CardNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CardPassword")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 3000,
                            CardNumber = 11223344,
                            CardPassword = 1234,
                            CustomerID = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 4000,
                            CardNumber = 11112222,
                            CardPassword = 4321,
                            CustomerID = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 5000,
                            CardNumber = 33334444,
                            CardPassword = 1221,
                            CustomerID = 3
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WrotenMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentID")
                        .HasColumnType("integer");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1+1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2+1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "3+1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4+1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5+1"
                        });
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Apartment", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Customer");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Card", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Debt", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Message", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InvoiceManagmentSystem.Entity.Concrete.Payment", b =>
                {
                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Entity.Concrete.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceManagmentSystem.Core.Entity.Concrete.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Card");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
